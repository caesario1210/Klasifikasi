{"cells":[{"cell_type":"markdown","metadata":{"id":"KuWBgNEKeRl0"},"source":["## [i] INFO\n","- <b>Kelompok: 10</b>\n","  1. <b>Dea `A12.2022.06900`\n","  2. Fariz `A12.2022.06867`\n","  3. Rior `A12.2022.06910`</b>\n","- <b>Dataset:</b> `bank_marketing.csv`\n","- <b>Link:</b> `https://archive.ics.uci.edu/dataset/222/bank+marketing`\n","- <b>Dataset information:</b> The data is related with direct marketing campaigns of a Portuguese banking institution. The marketing campaigns were based on phone calls. Often, more than one contact to the same client was required, in order to access if the product (bank term deposit) would be `yes` or not `no` subscribed.\n","- <b>Target</b>: has the client subscribed a term deposit? as `y`\n","\n"]},{"cell_type":"markdown","metadata":{"id":"kqZGOrTwcVkh"},"source":["## Library Loading"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":126116,"status":"ok","timestamp":1751699876532,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"4bcelQjccEde","outputId":"40c0c512-5571-46a1-8cf1-18b2896617df"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting ctgan\n","  Downloading ctgan-0.11.0-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: numpy>=1.23.3 in /usr/local/lib/python3.11/dist-packages (from ctgan) (2.0.2)\n","Requirement already satisfied: pandas>=1.5.0 in /usr/local/lib/python3.11/dist-packages (from ctgan) (2.2.2)\n","Requirement already satisfied: torch>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ctgan) (2.6.0+cu124)\n","Requirement already satisfied: tqdm<5,>=4.29 in /usr/local/lib/python3.11/dist-packages (from ctgan) (4.67.1)\n","Collecting rdt>=1.14.0 (from ctgan)\n","  Downloading rdt-1.17.1-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.5.0->ctgan) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.5.0->ctgan) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.5.0->ctgan) (2025.2)\n","Requirement already satisfied: scipy>=1.9.2 in /usr/local/lib/python3.11/dist-packages (from rdt>=1.14.0->ctgan) (1.15.3)\n","Requirement already satisfied: scikit-learn>=1.1.3 in /usr/local/lib/python3.11/dist-packages (from rdt>=1.14.0->ctgan) (1.6.1)\n","Collecting Faker>=17 (from rdt>=1.14.0->ctgan)\n","  Downloading faker-37.4.0-py3-none-any.whl.metadata (15 kB)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (3.18.0)\n","Requirement already satisfied: typing-extensions>=4.10.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (4.14.0)\n","Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (3.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (3.1.6)\n","Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (2025.3.2)\n","Collecting nvidia-cuda-nvrtc-cu12==12.4.127 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-runtime-cu12==12.4.127 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cuda-cupti-cu12==12.4.127 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cudnn-cu12==9.1.0.70 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cublas-cu12==12.4.5.8 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cufft-cu12==11.2.1.3 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-curand-cu12==10.3.5.147 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Collecting nvidia-cusolver-cu12==11.6.1.9 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Collecting nvidia-cusparse-cu12==12.3.1.170 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl.metadata (1.6 kB)\n","Requirement already satisfied: nvidia-cusparselt-cu12==0.6.2 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (0.6.2)\n","Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (2.21.5)\n","Requirement already satisfied: nvidia-nvtx-cu12==12.4.127 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (12.4.127)\n","Collecting nvidia-nvjitlink-cu12==12.4.127 (from torch>=2.0.0->ctgan)\n","  Downloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl.metadata (1.5 kB)\n","Requirement already satisfied: triton==3.2.0 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (3.2.0)\n","Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch>=2.0.0->ctgan) (1.13.1)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch>=2.0.0->ctgan) (1.3.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.5.0->ctgan) (1.17.0)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.1.3->rdt>=1.14.0->ctgan) (1.5.1)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.1.3->rdt>=1.14.0->ctgan) (3.6.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch>=2.0.0->ctgan) (3.0.2)\n","Downloading ctgan-0.11.0-py3-none-any.whl (24 kB)\n","Downloading rdt-1.17.1-py3-none-any.whl (73 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m73.8/73.8 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cublas_cu12-12.4.5.8-py3-none-manylinux2014_x86_64.whl (363.4 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m363.4/363.4 MB\u001b[0m \u001b[31m4.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_cupti_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (13.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.8/13.8 MB\u001b[0m \u001b[31m61.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_nvrtc_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (24.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m24.6/24.6 MB\u001b[0m \u001b[31m33.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cuda_runtime_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (883 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m883.7/883.7 kB\u001b[0m \u001b[31m53.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cudnn_cu12-9.1.0.70-py3-none-manylinux2014_x86_64.whl (664.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m664.8/664.8 MB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cufft_cu12-11.2.1.3-py3-none-manylinux2014_x86_64.whl (211.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m211.5/211.5 MB\u001b[0m \u001b[31m5.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_curand_cu12-10.3.5.147-py3-none-manylinux2014_x86_64.whl (56.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m56.3/56.3 MB\u001b[0m \u001b[31m12.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusolver_cu12-11.6.1.9-py3-none-manylinux2014_x86_64.whl (127.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m127.9/127.9 MB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_cusparse_cu12-12.3.1.170-py3-none-manylinux2014_x86_64.whl (207.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.5/207.5 MB\u001b[0m \u001b[31m6.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading nvidia_nvjitlink_cu12-12.4.127-py3-none-manylinux2014_x86_64.whl (21.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m21.1/21.1 MB\u001b[0m \u001b[31m69.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading faker-37.4.0-py3-none-any.whl (1.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.9/1.9 MB\u001b[0m \u001b[31m62.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: nvidia-nvjitlink-cu12, nvidia-curand-cu12, nvidia-cufft-cu12, nvidia-cuda-runtime-cu12, nvidia-cuda-nvrtc-cu12, nvidia-cuda-cupti-cu12, nvidia-cublas-cu12, Faker, nvidia-cusparse-cu12, nvidia-cudnn-cu12, rdt, nvidia-cusolver-cu12, ctgan\n","  Attempting uninstall: nvidia-nvjitlink-cu12\n","    Found existing installation: nvidia-nvjitlink-cu12 12.5.82\n","    Uninstalling nvidia-nvjitlink-cu12-12.5.82:\n","      Successfully uninstalled nvidia-nvjitlink-cu12-12.5.82\n","  Attempting uninstall: nvidia-curand-cu12\n","    Found existing installation: nvidia-curand-cu12 10.3.6.82\n","    Uninstalling nvidia-curand-cu12-10.3.6.82:\n","      Successfully uninstalled nvidia-curand-cu12-10.3.6.82\n","  Attempting uninstall: nvidia-cufft-cu12\n","    Found existing installation: nvidia-cufft-cu12 11.2.3.61\n","    Uninstalling nvidia-cufft-cu12-11.2.3.61:\n","      Successfully uninstalled nvidia-cufft-cu12-11.2.3.61\n","  Attempting uninstall: nvidia-cuda-runtime-cu12\n","    Found existing installation: nvidia-cuda-runtime-cu12 12.5.82\n","    Uninstalling nvidia-cuda-runtime-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-runtime-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-nvrtc-cu12\n","    Found existing installation: nvidia-cuda-nvrtc-cu12 12.5.82\n","    Uninstalling nvidia-cuda-nvrtc-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-nvrtc-cu12-12.5.82\n","  Attempting uninstall: nvidia-cuda-cupti-cu12\n","    Found existing installation: nvidia-cuda-cupti-cu12 12.5.82\n","    Uninstalling nvidia-cuda-cupti-cu12-12.5.82:\n","      Successfully uninstalled nvidia-cuda-cupti-cu12-12.5.82\n","  Attempting uninstall: nvidia-cublas-cu12\n","    Found existing installation: nvidia-cublas-cu12 12.5.3.2\n","    Uninstalling nvidia-cublas-cu12-12.5.3.2:\n","      Successfully uninstalled nvidia-cublas-cu12-12.5.3.2\n","  Attempting uninstall: nvidia-cusparse-cu12\n","    Found existing installation: nvidia-cusparse-cu12 12.5.1.3\n","    Uninstalling nvidia-cusparse-cu12-12.5.1.3:\n","      Successfully uninstalled nvidia-cusparse-cu12-12.5.1.3\n","  Attempting uninstall: nvidia-cudnn-cu12\n","    Found existing installation: nvidia-cudnn-cu12 9.3.0.75\n","    Uninstalling nvidia-cudnn-cu12-9.3.0.75:\n","      Successfully uninstalled nvidia-cudnn-cu12-9.3.0.75\n","  Attempting uninstall: nvidia-cusolver-cu12\n","    Found existing installation: nvidia-cusolver-cu12 11.6.3.83\n","    Uninstalling nvidia-cusolver-cu12-11.6.3.83:\n","      Successfully uninstalled nvidia-cusolver-cu12-11.6.3.83\n","Successfully installed Faker-37.4.0 ctgan-0.11.0 nvidia-cublas-cu12-12.4.5.8 nvidia-cuda-cupti-cu12-12.4.127 nvidia-cuda-nvrtc-cu12-12.4.127 nvidia-cuda-runtime-cu12-12.4.127 nvidia-cudnn-cu12-9.1.0.70 nvidia-cufft-cu12-11.2.1.3 nvidia-curand-cu12-10.3.5.147 nvidia-cusolver-cu12-11.6.1.9 nvidia-cusparse-cu12-12.3.1.170 nvidia-nvjitlink-cu12-12.4.127 rdt-1.17.1\n","Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.11/dist-packages (0.13.0)\n","Requirement already satisfied: numpy<3,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (2.0.2)\n","Requirement already satisfied: scipy<2,>=1.10.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.15.3)\n","Requirement already satisfied: scikit-learn<2,>=1.3.2 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.6.1)\n","Requirement already satisfied: sklearn-compat<1,>=0.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (0.1.3)\n","Requirement already satisfied: joblib<2,>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (1.5.1)\n","Requirement already satisfied: threadpoolctl<4,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from imbalanced-learn) (3.6.0)\n","Requirement already satisfied: gdown in /usr/local/lib/python3.11/dist-packages (5.2.0)\n","Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.11/dist-packages (from gdown) (4.13.4)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from gdown) (3.18.0)\n","Requirement already satisfied: requests[socks] in /usr/local/lib/python3.11/dist-packages (from gdown) (2.32.3)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from gdown) (4.67.1)\n","Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (2.7)\n","Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.11/dist-packages (from beautifulsoup4->gdown) (4.14.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (3.10)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (2.4.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (2025.6.15)\n","Requirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /usr/local/lib/python3.11/dist-packages (from requests[socks]->gdown) (1.7.1)\n"]}],"source":["# Import library yang dibutuhkan\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import joblib\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.tree import DecisionTreeClassifier, plot_tree\n","from sklearn.metrics import accuracy_score, recall_score, precision_score, classification_report, confusion_matrix\n","import os\n","\n","# using gan for imbalance learning\n","!pip install -U ctgan\n","# also use smote for imbalance learning\n","!pip install -U imbalanced-learn\n","# use gdown for retriving data seamlessly\n","!pip install -U gdown"]},{"cell_type":"markdown","metadata":{"id":"taynLRLVcxDQ"},"source":["## Dataset Stuff"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3472,"status":"ok","timestamp":1751699880068,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"VV5N_w7pd8zT","outputId":"66850318-3de9-4d56-8967-eb205165f830"},"outputs":[{"output_type":"stream","name":"stdout","text":["Folder '/content/dataset' created.\n","- File ID: 1JWGrp80GgRL6fxhY4vhy7-PuSm6Zx8eL\n","- Folder: /content/dataset\n","Downloading...\n","From: https://drive.google.com/uc?id=1JWGrp80GgRL6fxhY4vhy7-PuSm6Zx8eL\n","To: /content/dataset/bank_marketing.csv\n","100% 3.75M/3.75M [00:00<00:00, 74.3MB/s]\n"]}],"source":["# (bank_marketing.csv) https://drive.google.com/file/d/1JWGrp80GgRL6fxhY4vhy7-PuSm6Zx8eL/view?usp=sharing\n","# (heart_failure_clinical_records_dataset.csv) https://drive.google.com/file/d/13aF9FyDa87nuGUCrGCBDs404K0bbjP1r/view?usp=sharing\n","\n","folder_path = \"/content/dataset\"\n","file_name = \"bank_marketing.csv\"\n","file_id = \"1JWGrp80GgRL6fxhY4vhy7-PuSm6Zx8eL\"\n","try:\n","    if not os.path.exists(folder_path):\n","        os.makedirs(folder_path)\n","        print(f\"Folder '{folder_path}' created.\")\n","    else:\n","        print(f\"Folder '{folder_path}' already exists.\")\n","    output = f\"{folder_path}/{file_name}\"\n","    print(f\"- File ID: {file_id}\")\n","    print(f\"- Folder: {folder_path}\")\n","    !gdown \"{file_id}\" --output \"{output}\"\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":304,"status":"ok","timestamp":1751699880389,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"YZKc9tm1gHxI","outputId":"20d09610-88ee-4abc-f01f-7e5044f4e2bb"},"outputs":[{"output_type":"stream","name":"stdout","text":["- Data loaded\n"]}],"source":["# read the csv and assign to df variable\n","try:\n","    dataset_path = f\"{folder_path}/{file_name}\"\n","    if 'df' in globals():\n","        print(f\"- Dataset reloaded\")\n","    else:\n","        print('- Data loaded')\n","    df = pd.read_csv(f'{dataset_path}', sep=';', skipinitialspace=True)\n","except FileNotFoundError:\n","    print(f\"- Error: The file was not found at {dataset_path}\")\n","except Exception as e:\n","    print(f\"- An error occurred while loading the data: {e}\")"]},{"cell_type":"code","execution_count":5,"metadata":{"id":"uFhsbO1Yg8OO","executionInfo":{"status":"ok","timestamp":1751699880404,"user_tz":-420,"elapsed":10,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"}}},"outputs":[],"source":["# Set pandas display options\n","pd.set_option('display.max_columns', None)\n","# Set random seed untuk reproducibility\n","np.random.seed(42)"]},{"cell_type":"markdown","metadata":{"id":"NnYasC5vhIiG"},"source":["## Exploratory Data Analysis (EDA)"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":375,"status":"ok","timestamp":1751699880786,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"_ZkjKa_jh3f9","outputId":"c29eff84-7006-45eb-f450-03e6c0f8e6de"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   age           job  marital  education default  balance housing loan  \\\n","0   58    management  married   tertiary      no     2143     yes   no   \n","1   44    technician   single  secondary      no       29     yes   no   \n","2   33  entrepreneur  married  secondary      no        2     yes  yes   \n","3   47   blue-collar  married    unknown      no     1506     yes   no   \n","4   33       unknown   single    unknown      no        1      no   no   \n","\n","   contact  day month  duration  campaign  pdays  previous poutcome   y  \n","0  unknown    5   may       261         1     -1         0  unknown  no  \n","1  unknown    5   may       151         1     -1         0  unknown  no  \n","2  unknown    5   may        76         1     -1         0  unknown  no  \n","3  unknown    5   may        92         1     -1         0  unknown  no  \n","4  unknown    5   may       198         1     -1         0  unknown  no  "],"text/html":["\n","  <div id=\"df-affc294f-d52a-47a0-960c-336419970812\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>default</th>\n","      <th>balance</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>day</th>\n","      <th>month</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","      <th>poutcome</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>58</td>\n","      <td>management</td>\n","      <td>married</td>\n","      <td>tertiary</td>\n","      <td>no</td>\n","      <td>2143</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>261</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>44</td>\n","      <td>technician</td>\n","      <td>single</td>\n","      <td>secondary</td>\n","      <td>no</td>\n","      <td>29</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>151</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>33</td>\n","      <td>entrepreneur</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>no</td>\n","      <td>2</td>\n","      <td>yes</td>\n","      <td>yes</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>76</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>47</td>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","      <td>1506</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>92</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>33</td>\n","      <td>unknown</td>\n","      <td>single</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","      <td>1</td>\n","      <td>no</td>\n","      <td>no</td>\n","      <td>unknown</td>\n","      <td>5</td>\n","      <td>may</td>\n","      <td>198</td>\n","      <td>1</td>\n","      <td>-1</td>\n","      <td>0</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-affc294f-d52a-47a0-960c-336419970812')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-affc294f-d52a-47a0-960c-336419970812 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-affc294f-d52a-47a0-960c-336419970812');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-70a9c91e-3f20-4f74-befc-78b429ef3e56\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-70a9c91e-3f20-4f74-befc-78b429ef3e56')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-70a9c91e-3f20-4f74-befc-78b429ef3e56 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 45211,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 18,\n        \"max\": 95,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          35,\n          34,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"housemaid\",\n          \"unemployed\",\n          \"management\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"marital\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"married\",\n          \"single\",\n          \"divorced\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"secondary\",\n          \"primary\",\n          \"tertiary\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"default\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3044,\n        \"min\": -8019,\n        \"max\": 102127,\n        \"num_unique_values\": 7168,\n        \"samples\": [\n          3276,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"housing\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contact\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"unknown\",\n          \"cellular\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1,\n        \"max\": 31,\n        \"num_unique_values\": 31,\n        \"samples\": [\n          1,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"apr\",\n          \"mar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 257,\n        \"min\": 0,\n        \"max\": 4918,\n        \"num_unique_values\": 1573,\n        \"samples\": [\n          835,\n          1135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"campaign\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 63,\n        \"num_unique_values\": 48,\n        \"samples\": [\n          41,\n          27\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 100,\n        \"min\": -1,\n        \"max\": 871,\n        \"num_unique_values\": 559,\n        \"samples\": [\n          249,\n          551\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 275,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          17,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"poutcome\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"failure\",\n          \"success\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":6}],"source":["df.head()"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1751699880817,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"sA9123sIiKfn","outputId":"b3cf4703-2fe9-4710-a047-bf34bdbde9b4"},"outputs":[{"output_type":"stream","name":"stdout","text":["- Dataset Overview:\n","- Shape: (45211, 17)\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 45211 entries, 0 to 45210\n","Data columns (total 17 columns):\n"," #   Column     Non-Null Count  Dtype \n","---  ------     --------------  ----- \n"," 0   age        45211 non-null  int64 \n"," 1   job        45211 non-null  object\n"," 2   marital    45211 non-null  object\n"," 3   education  45211 non-null  object\n"," 4   default    45211 non-null  object\n"," 5   balance    45211 non-null  int64 \n"," 6   housing    45211 non-null  object\n"," 7   loan       45211 non-null  object\n"," 8   contact    45211 non-null  object\n"," 9   day        45211 non-null  int64 \n"," 10  month      45211 non-null  object\n"," 11  duration   45211 non-null  int64 \n"," 12  campaign   45211 non-null  int64 \n"," 13  pdays      45211 non-null  int64 \n"," 14  previous   45211 non-null  int64 \n"," 15  poutcome   45211 non-null  object\n"," 16  y          45211 non-null  object\n","dtypes: int64(7), object(10)\n","memory usage: 5.9+ MB\n","None\n"]}],"source":["# Dataset Overview\n","print(\"- Dataset Overview:\")\n","print(f\"- Shape: {df.shape}\")\n","print(df.info())"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":510},"executionInfo":{"elapsed":200,"status":"ok","timestamp":1751699881021,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"xurlhlcPjgZz","outputId":"847aea5e-3bc1-47e3-e0e9-5e2b8261469b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Numerical:\n"]},{"output_type":"display_data","data":{"text/plain":["                age        balance           day      duration      campaign  \\\n","count  45211.000000   45211.000000  45211.000000  45211.000000  45211.000000   \n","mean      40.936210    1362.272058     15.806419    258.163080      2.763841   \n","std       10.618762    3044.765829      8.322476    257.527812      3.098021   \n","min       18.000000   -8019.000000      1.000000      0.000000      1.000000   \n","25%       33.000000      72.000000      8.000000    103.000000      1.000000   \n","50%       39.000000     448.000000     16.000000    180.000000      2.000000   \n","75%       48.000000    1428.000000     21.000000    319.000000      3.000000   \n","max       95.000000  102127.000000     31.000000   4918.000000     63.000000   \n","\n","              pdays      previous  \n","count  45211.000000  45211.000000  \n","mean      40.197828      0.580323  \n","std      100.128746      2.303441  \n","min       -1.000000      0.000000  \n","25%       -1.000000      0.000000  \n","50%       -1.000000      0.000000  \n","75%       -1.000000      0.000000  \n","max      871.000000    275.000000  "],"text/html":["\n","  <div id=\"df-5e1d6652-6114-4ad9-94b8-1953a312d1ee\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>age</th>\n","      <th>balance</th>\n","      <th>day</th>\n","      <th>duration</th>\n","      <th>campaign</th>\n","      <th>pdays</th>\n","      <th>previous</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","      <td>45211.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>40.936210</td>\n","      <td>1362.272058</td>\n","      <td>15.806419</td>\n","      <td>258.163080</td>\n","      <td>2.763841</td>\n","      <td>40.197828</td>\n","      <td>0.580323</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>10.618762</td>\n","      <td>3044.765829</td>\n","      <td>8.322476</td>\n","      <td>257.527812</td>\n","      <td>3.098021</td>\n","      <td>100.128746</td>\n","      <td>2.303441</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>18.000000</td>\n","      <td>-8019.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>-1.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>33.000000</td>\n","      <td>72.000000</td>\n","      <td>8.000000</td>\n","      <td>103.000000</td>\n","      <td>1.000000</td>\n","      <td>-1.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>39.000000</td>\n","      <td>448.000000</td>\n","      <td>16.000000</td>\n","      <td>180.000000</td>\n","      <td>2.000000</td>\n","      <td>-1.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>48.000000</td>\n","      <td>1428.000000</td>\n","      <td>21.000000</td>\n","      <td>319.000000</td>\n","      <td>3.000000</td>\n","      <td>-1.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>95.000000</td>\n","      <td>102127.000000</td>\n","      <td>31.000000</td>\n","      <td>4918.000000</td>\n","      <td>63.000000</td>\n","      <td>871.000000</td>\n","      <td>275.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5e1d6652-6114-4ad9-94b8-1953a312d1ee')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5e1d6652-6114-4ad9-94b8-1953a312d1ee button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5e1d6652-6114-4ad9-94b8-1953a312d1ee');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-1bfb6cb0-37c0-4130-a0ba-18ae91dcc9f8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1bfb6cb0-37c0-4130-a0ba-18ae91dcc9f8')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-1bfb6cb0-37c0-4130-a0ba-18ae91dcc9f8 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"    display(df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15970.150201692022,\n        \"min\": 10.618762040975431,\n        \"max\": 45211.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          40.93621021432837,\n          39.0,\n          45211.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"balance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37605.126555585215,\n        \"min\": -8019.0,\n        \"max\": 102127.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1362.2720576850766,\n          448.0,\n          45211.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"day\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15979.397159121005,\n        \"min\": 1.0,\n        \"max\": 45211.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          15.80641879188693,\n          16.0,\n          45211.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15767.149700866448,\n        \"min\": 0.0,\n        \"max\": 45211.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          258.1630797814691,\n          180.0,\n          45211.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"campaign\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15980.684949017386,\n        \"min\": 1.0,\n        \"max\": 45211.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          45211.0,\n          2.763840658246887,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pdays\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15936.427694880493,\n        \"min\": -1.0,\n        \"max\": 45211.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          40.19782796222158,\n          871.0,\n          100.1287459906047\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"previous\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15970.756012949014,\n        \"min\": 0.0,\n        \"max\": 45211.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.5803233726305546,\n          275.0,\n          2.3034410449314233\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","Categorical:\n"]},{"output_type":"display_data","data":{"text/plain":["                job  marital  education default housing   loan   contact  \\\n","count         45211    45211      45211   45211   45211  45211     45211   \n","unique           12        3          4       2       2      2         3   \n","top     blue-collar  married  secondary      no     yes     no  cellular   \n","freq           9732    27214      23202   44396   25130  37967     29285   \n","\n","        month poutcome      y  \n","count   45211    45211  45211  \n","unique     12        4      2  \n","top       may  unknown     no  \n","freq    13766    36959  39922  "],"text/html":["\n","  <div id=\"df-5f6493f2-f815-4e68-8dbe-0e2095e5419e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>job</th>\n","      <th>marital</th>\n","      <th>education</th>\n","      <th>default</th>\n","      <th>housing</th>\n","      <th>loan</th>\n","      <th>contact</th>\n","      <th>month</th>\n","      <th>poutcome</th>\n","      <th>y</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","      <td>45211</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>12</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>12</td>\n","      <td>4</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>blue-collar</td>\n","      <td>married</td>\n","      <td>secondary</td>\n","      <td>no</td>\n","      <td>yes</td>\n","      <td>no</td>\n","      <td>cellular</td>\n","      <td>may</td>\n","      <td>unknown</td>\n","      <td>no</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>9732</td>\n","      <td>27214</td>\n","      <td>23202</td>\n","      <td>44396</td>\n","      <td>25130</td>\n","      <td>37967</td>\n","      <td>29285</td>\n","      <td>13766</td>\n","      <td>36959</td>\n","      <td>39922</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5f6493f2-f815-4e68-8dbe-0e2095e5419e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5f6493f2-f815-4e68-8dbe-0e2095e5419e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5f6493f2-f815-4e68-8dbe-0e2095e5419e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-e24480c4-3b57-4050-94ea-d389c2220005\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e24480c4-3b57-4050-94ea-d389c2220005')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-e24480c4-3b57-4050-94ea-d389c2220005 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"    display(df\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"job\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          12,\n          \"9732\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"marital\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"27214\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"education\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          \"23202\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"default\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"44396\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"housing\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"25130\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"loan\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"37967\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contact\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          \"29285\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          12,\n          \"13766\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"poutcome\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          4,\n          \"36959\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          \"39922\",\n          \"45211\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{}}],"source":["# Descriptive Statistics\n","# print df.describe, check if any object then do the same\n","if df.select_dtypes(include=['object']).empty:\n","    print('Numerical:')\n","    display(df.describe())\n","else:\n","    print('Numerical:')\n","    display(df.describe())\n","    print('\\nCategorical:')\n","    display(df.describe(include=['object']))"]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":64,"status":"ok","timestamp":1751699881096,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"rInoi_0KjyHq","outputId":"80d8d7fd-a8b8-48d7-8ca4-4f176d61d01d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Missing Values:\n","age          0\n","job          0\n","marital      0\n","education    0\n","default      0\n","balance      0\n","housing      0\n","loan         0\n","contact      0\n","day          0\n","month        0\n","duration     0\n","campaign     0\n","pdays        0\n","previous     0\n","poutcome     0\n","y            0\n","dtype: int64\n","\n","Missing Percentage:\n","age          0.0\n","job          0.0\n","marital      0.0\n","education    0.0\n","default      0.0\n","balance      0.0\n","housing      0.0\n","loan         0.0\n","contact      0.0\n","day          0.0\n","month        0.0\n","duration     0.0\n","campaign     0.0\n","pdays        0.0\n","previous     0.0\n","poutcome     0.0\n","y            0.0\n","dtype: float64\n"]}],"source":["# Check Missing Values\n","missing_values = df.isnull().sum()\n","missing_percentage = (missing_values / len(df)) * 100\n","print(\"Missing Values:\")\n","print(missing_values)\n","print(\"\\nMissing Percentage:\")\n","print(missing_percentage)"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":58,"status":"ok","timestamp":1751699881156,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"ZaC_humVj_ln","outputId":"3980dc18-9d1f-4549-d046-7a8f60915276"},"outputs":[{"output_type":"stream","name":"stdout","text":["duplicated Values:\n","0\n","\n","Missing Percentage:\n","0.0\n"]}],"source":["duplicated_values = df.duplicated().sum()\n","duplicated_percentage = (duplicated_values / len(df)) * 100\n","print(\"duplicated Values:\")\n","print(duplicated_values)\n","print(\"\\nMissing Percentage:\")\n","print(duplicated_percentage)"]},{"cell_type":"code","execution_count":11,"metadata":{"id":"BSjrVYIw6kbB","executionInfo":{"status":"ok","timestamp":1751699881167,"user_tz":-420,"elapsed":13,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"}}},"outputs":[],"source":["# prompt: iterate each column and show me unique values, and count how much unique values\n","def unique_val(df_uniq):\n","  for column in df_uniq.columns:\n","      unique_values = df_uniq[column].unique()\n","      unique_count = df_uniq[column].nunique()\n","      print(f\"Column '{column}':\")\n","      print(f\"  Unique Values: {unique_values}\")\n","      print(f\"  Unique Count: {unique_count}\")\n","      print(\"-\" * 20)"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":61,"status":"ok","timestamp":1751699881231,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"AQPxga--7Hk0","outputId":"f759d38b-a099-438c-bdd9-69987e3218a4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Column 'age':\n","  Unique Values: [58 44 33 47 35 28 42 43 41 29 53 57 51 45 60 56 32 25 40 39 52 46 36 49\n"," 59 37 50 54 55 48 24 38 31 30 27 34 23 26 61 22 21 20 66 62 83 75 67 70\n"," 65 68 64 69 72 71 19 76 85 63 90 82 73 74 78 80 94 79 77 86 95 81 18 89\n"," 84 87 92 93 88]\n","  Unique Count: 77\n","--------------------\n","Column 'job':\n","  Unique Values: ['management' 'technician' 'entrepreneur' 'blue-collar' 'unknown'\n"," 'retired' 'admin.' 'services' 'self-employed' 'unemployed' 'housemaid'\n"," 'student']\n","  Unique Count: 12\n","--------------------\n","Column 'marital':\n","  Unique Values: ['married' 'single' 'divorced']\n","  Unique Count: 3\n","--------------------\n","Column 'education':\n","  Unique Values: ['tertiary' 'secondary' 'unknown' 'primary']\n","  Unique Count: 4\n","--------------------\n","Column 'default':\n","  Unique Values: ['no' 'yes']\n","  Unique Count: 2\n","--------------------\n","Column 'balance':\n","  Unique Values: [ 2143    29     2 ...  8205 14204 16353]\n","  Unique Count: 7168\n","--------------------\n","Column 'housing':\n","  Unique Values: ['yes' 'no']\n","  Unique Count: 2\n","--------------------\n","Column 'loan':\n","  Unique Values: ['no' 'yes']\n","  Unique Count: 2\n","--------------------\n","Column 'contact':\n","  Unique Values: ['unknown' 'cellular' 'telephone']\n","  Unique Count: 3\n","--------------------\n","Column 'day':\n","  Unique Values: [ 5  6  7  8  9 12 13 14 15 16 19 20 21 23 26 27 28 29 30  2  3  4 11 17\n"," 18 24 25  1 10 22 31]\n","  Unique Count: 31\n","--------------------\n","Column 'month':\n","  Unique Values: ['may' 'jun' 'jul' 'aug' 'oct' 'nov' 'dec' 'jan' 'feb' 'mar' 'apr' 'sep']\n","  Unique Count: 12\n","--------------------\n","Column 'duration':\n","  Unique Values: [ 261  151   76 ... 1298 1246 1556]\n","  Unique Count: 1573\n","--------------------\n","Column 'campaign':\n","  Unique Values: [ 1  2  3  5  4  6  7  8  9 10 11 12 13 19 14 24 16 32 18 22 15 17 25 21\n"," 43 51 63 41 26 28 55 50 38 23 20 29 31 37 30 46 27 58 33 35 34 36 39 44]\n","  Unique Count: 48\n","--------------------\n","Column 'pdays':\n","  Unique Values: [ -1 151 166  91  86 143 147  89 140 176 101 174 170 167 195 165 129 188\n"," 196 172 118 119 104 171 117 164 132 131 123 159 186 111 115 116 173 178\n"," 110 152  96 103 150 175 193 181 185 154 145 138 126 180 109 158 168  97\n"," 182 127 130 194 125 105 102  26 179  28 183 155 112 120 137 124 187 190\n"," 113 162 134 169 189   8 144 191 184 177   5  99 133  93  92  10 100 156\n"," 198 106 153 146 128   7 121 160 107  90  27 197 136 139 122 157 149 135\n","  30 114  98 192 163  34  95 141  31 199  94 108  29 268 247 253 226 244\n"," 239 245 204 231 238 258 230 254 265  71 223 246 250 266 240 205 261 259\n"," 241 260 234 251 225 161 237 262 248 255 220 227 206 224 249 235 228 263\n","   2 270 232 252 207 200 269 233 256 273 272 242 264 208 214 222 271 203\n"," 221 202 216 201 257 229 210 217  75 213  73  76 267 211 215  77 236  82\n","   6 209 274   1 243 212 275  80 276   9 279  12 280  88 277  85  84 219\n","  24  21 282  41 294  49 329 307 303 331 308 300  64 314 287 330 332 302\n"," 323 318 333  60 326 335 313 312 305 325 327 336 309 328 322  39 316 292\n"," 295 310 306 320 317 289  57 321 142 339 301 315 337 334 340 319  17  74\n"," 148 341 299 344 342 324 345 346 304 281 343 338  14 347  15 291 348 349\n"," 285 350 284  25 283 278  81   4  87  83  79  70  13 293  37  78  63  22\n"," 296 355  66  19  35 360 357 354 351 362 358 365 298 286 364 363  47 361\n"," 288 366 356 352 359 297 367 353 368  42 290  67 371 370 369  50  36 373\n"," 374 372 311 375 378  59 379  40  18  43  20  69  38 385  56  55  44 391\n","  72 390  32  62 399 393  65 377 395 388 389 386  61 412 405 434 394 382\n"," 459 440 397 383  68 461 462 463 422  51 457 430 442 403 454 428 392 410\n"," 401 474 475 477 478  54 476 380 479  45  46 495  58  48 518  52 515 520\n"," 511 536 387 218  33 544 435 436 555 433 446 558 469 616 561 553 384 592\n"," 467 585 480 421 667 626 426 595 381 376 648 521 452 449 633 398  53 460\n"," 670 551 414 557 687 404 651 686 425 504 578 674 416 586 411 756 450 745\n"," 514 417 424 776 396 683 529 439 415 456 407 458 532 481 791 701 531 792\n"," 413 445 535 784 419 455 491 431 542 470 472 717 437   3 782 728 828 524\n"," 562 761 492 775 579 493 464 760 466 465 656 831 490 432 655 427 749 838\n"," 769 587 778 854 779 850 771 594 842 589 603 484 489 486 409 444 680 808\n"," 485 503 690 772 774 526 420 528 500 826 804 508 547 805 541 543 871 550\n"," 530]\n","  Unique Count: 559\n","--------------------\n","Column 'previous':\n","  Unique Values: [  0   3   1   4   2  11  16   6   5  10  12   7  18   9  21   8  14  15\n","  26  37  13  25  20  27  17  23  38  29  24  51 275  22  19  30  58  28\n","  32  40  55  35  41]\n","  Unique Count: 41\n","--------------------\n","Column 'poutcome':\n","  Unique Values: ['unknown' 'failure' 'other' 'success']\n","  Unique Count: 4\n","--------------------\n","Column 'y':\n","  Unique Values: ['no' 'yes']\n","  Unique Count: 2\n","--------------------\n"]},{"output_type":"display_data","data":{"text/plain":["None"]},"metadata":{}}],"source":["display(unique_val(df))"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":410},"executionInfo":{"elapsed":474,"status":"ok","timestamp":1751699881712,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"NkZw_n1Yj4sP","outputId":"06a4c5c4-6b49-41b2-90f2-1644b49f1a42"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 600x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# prompt: target distribution using plt\n","\n","import matplotlib.pyplot as plt\n","plt.figure(figsize=(6, 4))\n","sns.countplot(x='y', data=df)\n","plt.title('Distribution of Target Variable (y)')\n","plt.xlabel('Subscribed to Term Deposit')\n","plt.ylabel('Count')\n","plt.show()"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"BgA--W-EOwut","executionInfo":{"status":"ok","timestamp":1751699881715,"user_tz":-420,"elapsed":10,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"}}},"outputs":[],"source":[]},{"cell_type":"markdown","metadata":{"id":"twdGwYPNkaUC"},"source":["### Data Visualization"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":4073,"status":"ok","timestamp":1751699885791,"user":{"displayName":"Zen Ravens","userId":"15115922787472366463"},"user_tz":-420},"id":"AS1v_ccRkea7","outputId":"dd22e385-04b7-4a04-82c9-6e97214b648b"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x1000 with 9 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Histogram untuk variabel numerik\n","numeric_features = df.select_dtypes(include=[np.number]).columns\n","df[numeric_features].hist(figsize=(14, 10))\n","plt.tight_layout()\n","#plt.savefig('/content/files/numeric_histograms.png')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DpVDFVy0ke5m"},"outputs":[],"source":["# Bar plot untuk variabel kategorikal\n","categorical_features = df.select_dtypes(include=['object']).columns\n","n_features = len(categorical_features)\n","n_cols = 3 # Adjust as needed\n","n_rows = (n_features + n_cols - 1) // n_cols\n","plt.figure(figsize=(n_cols * 5, n_rows * 5)) # Adjust overall figure size\n","for i, feature in enumerate(categorical_features):\n","    plt.subplot(n_rows, n_cols, i + 1)\n","    df[feature].value_counts().plot(kind='bar')\n","    if feature == \"y\":\n","      plt.title(f'Distribution of \"{feature}\" (Target)')\n","    else:\n","      plt.title(f'Distribution of {feature}')\n","    plt.ylabel('Count')\n","    plt.xlabel(feature)\n","    plt.xticks(rotation=45)\n","plt.tight_layout()\n","#plt.savefig('distribution_categorical_features.png')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-NfEW2CjlfKU"},"outputs":[],"source":["# Korelasi antara variabel numerik\n","def correlated_heatmap(df):\n","    numeric_features = df.select_dtypes(include=[np.number]).columns\n","    correlation_matrix = df[numeric_features].corr()\n","    plt.figure(figsize=(14, 10))\n","    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')\n","    plt.title('Correlation Matrix of Numeric Features')\n","    plt.tight_layout()\n","    #plt.savefig('correlation_matrix.png')\n","    plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OKerqa28mITq"},"outputs":[],"source":["correlated_heatmap(df)"]},{"cell_type":"markdown","metadata":{"id":"xwbH9JYE4YhF"},"source":["## Preprocessing"]},{"cell_type":"markdown","metadata":{"id":"_V48SiEvvGrR"},"source":["### Feature Re-engineering"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"uyxyi74F1gmc"},"outputs":[],"source":["df.info()"]},{"cell_type":"code","source":["categorical_columns = df.select_dtypes(include=['object']).columns\n","encoding_maps = {}\n","for col in categorical_columns:\n","    if col == 'month':\n","        month_order = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']\n","        mapping = {month: i for i, month in enumerate(month_order, 1)}\n","        if 'unknown' in df[col].unique():\n","            mapping['unknown'] = 0\n","        month_map = mapping # Assign to month_map\n","    elif col == 'y':\n","        mapping = {'no': 0, 'yes': 1}\n","        if 'unknown' in df[col].unique():\n","            mapping['unknown'] = 0\n","        y_map = mapping # Assign to y_map\n","    else:\n","        unique_values = df[col].unique()\n","        mapping = {}\n","        if 'unknown' in unique_values:\n","            mapping['unknown'] = 0\n","            other_values = [val for val in unique_values if val != 'unknown']\n","            for i, value in enumerate(other_values, 1):\n","                mapping[value] = i\n","        else:\n","             for i, value in enumerate(unique_values, 1):\n","                mapping[value] = i\n","        # Dynamically create variable names for other column mappings\n","    encoding_maps[col] = mapping\n","    df[col] = df[col].map(mapping)"],"metadata":{"id":"YCOM8lTk4KJT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Display the encoding_maps\n","display(encoding_maps)"],"metadata":{"id":"0gJvltKf6Q8x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["display(df['y'])"],"metadata":{"id":"izTcr5uOUpr4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QumeE0fdpc4X"},"source":["### EDA After Re-Engineering"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-eEHEm2Bpwbo"},"outputs":[],"source":["# re-assign numeric_features and deselect the target\n","correlated_heatmap(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"luqRxv2qNtbK"},"outputs":[],"source":["def data_distribution(series):\n","  series = df.select_dtypes(include=[np.number]).columns.drop('y') # Exclude target variable 'y'\n","  n_features = len(series)\n","  n_cols = 3 # Atur jumlah kolom sesuai kebutuhan\n","  n_rows = (n_features + n_cols - 1) // n_cols\n","\n","  plt.figure(figsize=(n_cols * 5, n_rows * 4)) # Adjust overall figure size for vertical layout\n","  for i, feature in enumerate(series):\n","      plt.subplot(n_rows, n_cols, i + 1)\n","      df[feature].hist()\n","      plt.title(f'Distribution of {feature}')\n","      plt.xlabel(feature)\n","      plt.ylabel('Frequency')\n","  plt.tight_layout()\n","  plt.show()\n","data_distribution(df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"baHw0vcyzJ4M"},"outputs":[],"source":["display(unique_val(df))"]},{"cell_type":"markdown","metadata":{"id":"jcTRwTJOPUny"},"source":["### Robust Normalization"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bk9AI3jpPWzg"},"outputs":[],"source":["# prompt: create df normalization use robust mode if the unique value more than 12, and assign normalized_df into df\n","from sklearn.preprocessing import RobustScaler\n","\n","# Identify numerical columns, excluding the target variable 'y'\n","numerical_cols = df.select_dtypes(include=np.number).columns.drop('y', errors='ignore')\n","\n","# Create a copy of the DataFrame to store the normalized data\n","normalized_df = df.copy()\n","\n","# Apply Robust Scaling to each numerical column\n","for col in numerical_cols:\n","    unique_count = df[col].nunique()\n","    if unique_count > 3:\n","        print(f\"Applying RobustScaler to column: {col}\")\n","        scaler = RobustScaler()\n","        normalized_df[col] = scaler.fit_transform(df[[col]])\n","    else:\n","        print(f\"Column '{col}' has {unique_count} unique values (<3), skipping normalization.\")\n","\n","# Assign the normalized dataframe back to df\n","df = normalized_df\n","data_distribution(normalized_df)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ciWucbOkQdgg"},"outputs":[],"source":["display(df)"]},{"cell_type":"markdown","metadata":{"id":"oyc6iY0jocGm"},"source":["### Outlier Detection"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"505e6c8a"},"outputs":[],"source":["def detect_outlier(df_outlier, target):\n","    features = df_outlier.select_dtypes(include=[np.number]).columns.drop(target, errors='ignore')\n","    print(\"Outlier Detection (IQR Method):\")\n","    for col in features:\n","        Q1 = df_outlier[col].quantile(0.25)\n","        Q3 = df_outlier[col].quantile(0.75)\n","        IQR = Q3 - Q1\n","        lower_bound = Q1 - 1.5 * IQR\n","        upper_bound = Q3 + 1.5 * IQR\n","        # Identify outliers\n","        outliers = df_outlier[(df_outlier[col] < lower_bound) | (df_outlier[col] > upper_bound)]\n","        # check if there is outlier\n","        print(f\"\\n--- Column: {col} ---\")\n","        print(f\"Min: {df_outlier[col].min()}\")\n","        print(f\"Max: {df_outlier[col].max()}\")\n","        print(f\"Q1: {Q1}\")\n","        print(f\"Q3: {Q3}\")\n","        print(f\"IQR: {IQR}\")\n","        print(f\"Lower Bound (IQR): {lower_bound}\")\n","        print(f\"Upper Bound (IQR): {upper_bound}\")\n","        print(f\"Number of outliers: {len(outliers)}\")\n","\n","    # Plotting loop\n","    plt.figure(figsize=(14, len(features) + 2)) # Adjust figure size dynamically\n","    for i, col in enumerate(features):\n","        plt.subplot(len(features), 1, i + 1)\n","        sns.boxplot(x=df_outlier[col], orient='h')\n","        plt.title(f'Boxplot of {col}')\n","        plt.xlabel(col)\n","    plt.tight_layout()\n","    plt.show()\n","\n","# Example usage with your dataframe 'df'\n","detect_outlier(normalized_df, 'y')"]},{"cell_type":"markdown","metadata":{"id":"Jq_I1zK0vAGa"},"source":["### Data Cleaning"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jRv6sktOvCOI"},"outputs":[],"source":["# there is no duplicated or null/nan value"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"paJBj_D_96ey"},"outputs":[],"source":["def exception_columns(df_excp):\n","  exception_cols = []\n","  for column in df_excp.columns:\n","      unique_count = df_excp[column].nunique()\n","      if unique_count < 10:\n","          exception_cols.append(column)\n","  return exception_cols"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iorteS_zvd2m"},"outputs":[],"source":["# handling outlier with capping method (IQR)\n","def cap_outlier(df, column):\n","    Q1 = df[column].quantile(0.25)\n","    Q3 = df[column].quantile(0.75)\n","    IQR = Q3 - Q1\n","    lower_bound = Q1 - 1.5 * IQR\n","    upper_bound = Q3 + 1.5 * IQR\n","    df[column] = np.where(df[column] < lower_bound, lower_bound, df[column])\n","    df[column] = np.where(df[column] > upper_bound, upper_bound, df[column])\n","    return df\n","\n","df_outliers = df.copy()\n","#exception_cols = exception_columns(df_outliers)\n","print(f\"- Exception columns: {exception_cols}\")\n","print(\"- Handling Outliers using Capping (IQR Method):\")\n","features = df_outliers.select_dtypes(include=[np.number]).columns.drop('y')\n","for column in features:\n","    print(f\"  - Processing column: {column}\")\n","    df_outliers = cap_outlier(df_outliers, column)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"silKEML1O0oB"},"outputs":[],"source":["def remove_outlier(df, column):\n","    Q1 = df[column].quantile(0.25)\n","    Q3 = df[column].quantile(0.75)\n","    IQR = Q3 - Q1\n","    lower_bound = Q1 - 1.5 * IQR\n","    upper_bound = Q3 + 1.5 * IQR\n","    df_no_outlier = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)].copy()\n","    return df_no_outlier\n","\n","df_outliers = df.copy()\n","exception_cols = exception_columns(df_outliers)\n","print(f\"- Exception columns: {exception_cols}\")\n","print(\"- Removing Outliers (IQR Method):\")\n","features = df_outliers.select_dtypes(include=[np.number]).columns.drop(exception_cols)\n","for column in features:\n","    print(f\"  - Processing column: {column}\")\n","    initial_rows = len(df_outliers)\n","    df_outliers = remove_outlier(df_outliers, column)\n","    removed_rows = initial_rows - len(df_outliers)\n","    print(f\"    Removed {removed_rows} outliers from {column}. Remaining rows: {len(df_outliers)}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7YIxy0eNTWVY"},"outputs":[],"source":["# re-visualize outlier after handling\n","detect_outlier(df_outliers, 'y')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O1vHd8pxOPYa"},"outputs":[],"source":["correlated_heatmap(df_outliers)"]},{"cell_type":"code","source":["unique_val(df_outliers)"],"metadata":{"id":"dFt32DxSZtfJ"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jCfQGruPCAV1"},"outputs":[],"source":["df_outliers.info()"]},{"cell_type":"code","source":["df = df_outliers"],"metadata":{"id":"yJbz2Cusyx5M"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"dgod07apzarm"},"source":["### Feature Selection and Splitting"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N07s-SMzRmBh"},"outputs":[],"source":["# Re-assign feature and target after preprocessing\n","features = df.drop({'y'}, axis=1)\n","target = df['y']"]},{"cell_type":"code","source":["display(features.head())\n","display(target.head())"],"metadata":{"id":"Sf0C9AkAapZi"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S6d3ZzV-2ZD2"},"outputs":[],"source":["# Split into training and testing sets\n","x_train, x_test, y_train, y_test = train_test_split(features, target, test_size=0.25, random_state=42, stratify=target)\n","print(f\"- Training set size : {x_train.shape} samples\")\n","print(f\"- Testing set size  : {x_test.shape} samples\")\n","print(f\"\\n- Training-set target count: {y_train.value_counts()}\")\n","print(f\"\\n- Testing-set target count: {y_test.value_counts()}\")"]},{"cell_type":"markdown","metadata":{"id":"Q867pzFjoXlL"},"source":["### SMOTE"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"a2oD1vYNtEiG"},"outputs":[],"source":["# import smote library\n","from imblearn.combine import SMOTETomek\n","from imblearn.over_sampling import SMOTE"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"wIzfcEyqWCnJ"},"outputs":[],"source":["display(x_test.head())\n","display(y_test.head())\n","display(x_train.head())\n","display(y_train.head())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CP9g-CRA4CmI"},"outputs":[],"source":["# smote tomek\n","print(\"Before SMOTE-Tomek:\")\n","print(y_train.value_counts())\n","\n","# Initialize SMOTETomek\n","s_tomek = SMOTETomek(random_state=42,\n","                 sampling_strategy='minority',\n","                 n_jobs=-1)\n","\n","# Apply SMOTE-Tomek to the training data\n","x_smote_tomek_resampled, y_smote_tomek_resampled = s_tomek.fit_resample(x_train, y_train)\n","\n","print(\"\\nAfter SMOTE-Tomek:\")\n","print(y_smote_tomek_resampled.value_counts())\n","\n","x_train = x_smote_tomek_resampled\n","y_train = y_smote_tomek_resampled"]},{"cell_type":"code","source":[],"metadata":{"id":"DtsXfL5-ud0q"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EpaTF1iLQjwO"},"outputs":[],"source":["# normal smote\n","smote = SMOTE(random_state=42, sampling_strategy='minority')\n","\n","# Fit and resample the data\n","x_resampled_smote, y_resampled_smote = smote.fit_resample(x_train, y_train)\n","\n","# Create a new DataFrame with the resampled data\n","df_resampled_smote = pd.DataFrame(x_resampled_smote, columns=x_train.columns)\n","df_resampled_smote['y'] = y_resampled_smote\n","\n","print(\"Shape of original data:\", x_train.shape)\n","print(\"Shape of resampled data (SMOTE):\", df_resampled_smote.shape)\n","print(\"\\nDistribution of target variable in original data:\")\n","print(y_train.value_counts())\n","print(\"\\nDistribution of target variable in resampled data (SMOTE):\")\n","print(y_resampled_smote.value_counts())\n","\n","x_train = df_resampled_smote.drop('y', axis=1)\n","y_train = df_resampled_smote['y']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hvZunh1MTVUr"},"outputs":[],"source":["display(y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nyx2zsV4ZbnI"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","plt.figure(figsize=(6, 4))\n","sns.countplot(x=y_train)\n","plt.title('Distribution of Target Variable in y_train')\n","plt.xlabel('Subscribed to Term Deposit')\n","plt.ylabel('Count')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"gyKKy31w5rjr"},"source":["### GAN"]},{"cell_type":"code","source":["from ctgan import CTGAN\n","# Ubah ke DataFrame agar cocok dengan CTGAN\n","x_train_gan_scaled_df = pd.DataFrame(x_train, columns=x_train.columns)\n","x_train_gan_scaled_df['y'] = y_train.values\n","\n","# Mengambil data minoritas untuk dilatin dengan GAN\n","minority_class = y_train.value_counts().idxmin()\n","minority_data = x_train_gan_scaled_df[x_train_gan_scaled_df['y'] == minority_class]\n","\n","# Latih dengan CTGAN\n","ctgan = CTGAN()\n","ctgan.fit(minority_data)\n","\n","# Tentukan berapa data sintetis yang ingin dihasilkan\n","minority_count = y_train.value_counts().min()\n","majority_count = y_train.value_counts().max()\n","n_samples_to_generate = majority_count - minority_count\n","\n","# Hasilkan data sintetis dari kelas minoritas\n","synthetic_data = ctgan.sample(n_samples_to_generate)\n","\n","# Gabungkan kembali data sintetis dengan data asli\n","augmented_train_data = pd.concat([x_train_gan_scaled_df, synthetic_data], ignore_index=True)\n","\n","print(\"Before GAN Augmentation:\")\n","print(y_train.value_counts())\n","\n","# Pisahkan kembali fitur dan target setelah augmentasi\n","x_train = augmented_train_data.drop(columns='y')\n","y_train = augmented_train_data['y']\n","\n","# show before scaled and after scaled\n","print(\"\\nAfter GAN Augmentation:\")\n","print(y_train.value_counts())"],"metadata":{"id":"JxbbofQagtb3"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UC0r7UYiJKJg"},"outputs":[],"source":["display(minority_data)"]},{"cell_type":"markdown","metadata":{"id":"61G9zmrJzd7d"},"source":["## Model Training"]},{"cell_type":"markdown","metadata":{"id":"ea2aRRIinJ5h"},"source":["### Decision Tree"]},{"cell_type":"markdown","metadata":{"id":"ZkgZ3bjfee5F"},"source":["#### Default DT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"0rsu6GcFedvp"},"outputs":[],"source":["# Initialize the Decision Tree Classifier with default hyperparameters\n","dt_default = DecisionTreeClassifier(random_state=42)\n","\n","# Train the model\n","dt_default.fit(x_train, y_train)"]},{"cell_type":"markdown","metadata":{"id":"DplN9jPuei0W"},"source":["#### Tuned DT"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OwCk0Tff3NAq"},"outputs":[],"source":["# Define parameter grid for GridSearchCV with more commonly used values\n","dt_param_grid = {\n","    'max_depth': [None, 5, 10, 15],   # Common depths to explore, None means no limit\n","    'min_samples_split': [2, 10, 15], # Common values for minimum samples required to split\n","    'min_samples_leaf': [1, 5],       # Common values for minimum samples required at a leaf node\n","    'criterion': ['gini', 'entropy']  # Both criteria are commonly used\n","}\n","\n","# Perform grid search with cross-validation\n","grid_search = GridSearchCV(\n","    estimator=DecisionTreeClassifier(random_state=42),\n","    param_grid=dt_param_grid,\n","    cv=3,\n","    scoring='accuracy', # Using accuracy as the scoring metric\n","    verbose=1,\n","    n_jobs=-1 # Use all available cores\n",")\n","\n","# Fit the grid search to the data\n","grid_search.fit(x_train, y_train)\n","\n","# Get the best parameters and best model\n","dt_tuned_best_params = grid_search.best_params_\n","dt_tuned = grid_search.best_estimator_\n","\n","print(f\"[TUNED] Best Parameters: {dt_tuned_best_params}\")"]},{"cell_type":"code","source":["plt.figure(figsize=(20, 10))\n","plot_tree(dt_tuned, feature_names=x_train.columns.tolist(), class_names=['0', '1'], filled=True, max_depth=4, fontsize=10)\n","plt.title(\"Decision Tree Visualisation (Tuned Model)\", fontsize=16)\n","plt.show()"],"metadata":{"id":"bTyLKC_XpOba"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jvJw7iZt3ejp"},"source":["## Evaluation"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7FgmV2ZSfFb3"},"outputs":[],"source":["def evaluate_model(model, x_test, y_test):\n","    y_pred = model.predict(x_test)\n","    accuracy = accuracy_score(y_test, y_pred)\n","    recall = recall_score(y_test, y_pred)\n","    precision = precision_score(y_test, y_pred)\n","    report = classification_report(y_test, y_pred)\n","    conf_matrix = confusion_matrix(y_test, y_pred)\n","\n","    print(f\"Accuracy: {accuracy:.4f}\")\n","    print(f\"Recall: {recall:.4f}\")\n","    print(f\"Precision: {precision:.4f}\")\n","    print(\"\\nClassification Report:\\n\", report)\n","    print(\"\\nConfusion Matrix:\")\n","    plt.figure(figsize=(7, 5))\n","    sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues',\n","              xticklabels=sorted(target.unique()),\n","              yticklabels=sorted(target.unique()))\n","    plt.xlabel('Predicted')\n","    plt.ylabel('Actual')\n","    plt.title('Confusion Matrix')\n","    #plt.savefig('confusion_matrix.png')\n","    plt.show()\n","    #return accuracy, recall, precision, report, conf_matrix"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oe-8ew-L5EVk"},"outputs":[],"source":["# Plot feature importance\n","def feature_importance(model):\n","    feature_importance = pd.DataFrame({\n","        'Feature': features.columns,\n","        'Importance': model.feature_importances_\n","    }).sort_values('Importance', ascending=False)\n","\n","    plt.figure(figsize=(12, 8))\n","    sns.barplot(x='Importance', y='Feature', data=feature_importance)\n","    plt.title('Feature Importance')\n","    plt.tight_layout()\n","    #plt.savefig('feature_importance.png')\n","    plt.show()"]},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","def evaluate_model_full(model, x_train, y_train, x_test, y_test):\n","    # Evaluate on Training Data\n","    y_pred_train = model.predict(x_train)\n","\n","    accuracy_train = accuracy_score(y_train, y_pred_train)\n","    precision_train = precision_score(y_train, y_pred_train, average='macro')\n","    recall_train = recall_score(y_train, y_pred_train, average='macro')\n","    f1_train = f1_score(y_train, y_pred_train, average='macro')\n","\n","    print(\"> Training Data Evaluation:\")\n","    print(f\"  Accuracy: {accuracy_train:.4f}\")\n","    print(f\"  Precision (Macro): {precision_train:.4f}\")\n","    print(f\"  Recall (Macro): {recall_train:.4f}\")\n","    print(f\"  F1 Score (Macro): {f1_train:.4f}\")\n","\n","    # Evaluate on Testing Data\n","    y_pred_test = model.predict(x_test)\n","\n","    accuracy_test = accuracy_score(y_test, y_pred_test)\n","    precision_test = precision_score(y_test, y_pred_test, average='macro')\n","    recall_test = recall_score(y_test, y_pred_test, average='macro')\n","    f1_test = f1_score(y_test, y_pred_test, average='macro')\n","\n","\n","    print(\"\\n> Testing Data Evaluation:\")\n","    print(f\"  Accuracy: {accuracy_test:.4f}\")\n","    print(f\"  Precision (Macro): {precision_test:.4f}\")\n","    print(f\"  Recall (Macro): {recall_test:.4f}\")\n","    print(f\"  F1 Score (Macro): {f1_test:.4f}\")"],"metadata":{"id":"ZmKn1VMqX2iR"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"tIN7gadLf71s"},"outputs":[],"source":["print(\"Evaluating Default Decision Tree:\")\n","evaluate_model(dt_default, x_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7AeSpSEJf8nt"},"outputs":[],"source":["print(\"Evaluating Default Decision Tree:\")\n","evaluate_model(dt_tuned, x_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H0huCW4M8Wma"},"outputs":[],"source":["# Default DT\n","print(\"--- Default Decision Tree Evaluation ---\")\n","evaluate_model_full(dt_default, x_train, y_train, x_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YPYJzTe7qXG2"},"outputs":[],"source":["# Tuned DT\n","print(\"--- Tuned Decision Tree Evaluation ---\")\n","evaluate_model_full(dt_tuned, x_train, y_train, x_test, y_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Un5o2xxSnYeA"},"outputs":[],"source":["feature_importance(dt_default)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H64XLNDZji8l"},"outputs":[],"source":["feature_importance(dt_tuned)"]},{"cell_type":"markdown","metadata":{"id":"9u6GlAXV-O-j"},"source":["## Saving Best Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XHjpWUmF-RQb"},"outputs":[],"source":["from datetime import datetime\n","date = datetime.now().strftime(\"%H%M%S\")\n","\n","best_model_name = \"dt_tuned\"\n","best_model = dt_tuned\n","best_params = dt_tuned_best_params\n","\n","joblib_folder = \"/content/best_model\"\n","joblib_file_name = f\"_{date}_{best_model_name}_comps.joblib\"\n","model_components = {\n","    'model': best_model,\n","    'feature_names': features.columns.tolist(),\n","    'encoding_maps': encoding_maps,\n","    'model_params': best_params,\n","    'removed_features': [],\n","    'target_map': y_map\n","}\n","\n","# Save model components\n","try:\n","    if not os.path.exists(joblib_folder):\n","        os.makedirs(joblib_folder)\n","        print(f\"Folder '{joblib_folder}' created.\")\n","    else:\n","        print(f\"Folder '{joblib_folder}' already exists.\")\n","    joblib.dump(model_components, f\"{joblib_folder}/{joblib_file_name}\")\n","    print(f\"Model components saved successfully as '{joblib_file_name}'\")\n","except Exception as e:\n","    print(f\"An error occurred: {e}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pXgjUcGQCqeV"},"outputs":[],"source":["# prompt: load joblib\n","\n","joblib_file = joblib_file_name\n","model_path = f\"{joblib_folder}/{joblib_file}\"\n","loaded_model_components = joblib.load(model_path)\n","\n","loaded_model = loaded_model_components['model']\n","loaded_feature_names = loaded_model_components['feature_names']\n","loaded_encoding_maps = loaded_model_components['encoding_maps']\n","loaded_model_params = loaded_model_components['model_params']\n","loaded_removed_features = loaded_model_components['removed_features']\n","loaded_target_map = loaded_model_components['target_map']\n","\n","print(\"Model loaded successfully:\")\n","print(f\"Model: {loaded_model}\")\n","print(f\"Feature Names: {loaded_feature_names}\")\n","display(\"Encoding Maps (for target): \", loaded_encoding_maps)\n","print(f\"Model Parameters: {loaded_model_params}\")\n","print(f\"Removed Features: {loaded_removed_features}\")\n","print(f\"Target Map: \\n{loaded_target_map}\")"]},{"cell_type":"code","source":["display(loaded_model_components['model_params'])"],"metadata":{"id":"MfjfCj7YY6wG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"cYVyJxnpZpSZ"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}